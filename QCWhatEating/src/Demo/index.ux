<template>
  <div class="demo-page">

    <text class="hello">Hi客官{{hellotitle}}好!</text>
    <list class="list-cls">
    <list-item>
    <div class="seachspan">

      <input type="text" class="seacheating" maxlength="16" placeholder="{{hellotitle}}想吃点什么?" value="{{eatingInput}}" @change="bindPhoneChange"
      />
      <input class="soutu-btn" type="button" value="搜一下" onclick="searchEating" />
    </div>
  </list-item>
  
      <list-item>
        <text class="tuijian">推荐</text>
      </list-item>
      <list-item>
        <text class="clstjnametwo" show="{{hasData}}">{{tjnametwo}}</text>
      </list-item>

      <block for="articleList" show="{{hasMoreData}}">
        <list-item type="articles" onclick="clickOpen($item.id, $item.albums[0], $item.title,$item.ingredients,$item.burden,$item.tags,$item.steps,$item.imtro)">
          <text class="clstjnameone">{{$item.title}}</text>
        </list-item>
      </block>
    </list>
    <div>
    <text class="caipu" show="false">菜谱</text>
    <text class="more" onclick="openMore" show="false">更多</text>
  </div>
    <list class="list-clslist" show="false">
      <block for="caipuList">
        <list-item class="caipu-type-item" type="articlescp">
          <stack class="caipu-stack">
            <image class="caipu-type-one-image" src="../Common/MainImage/{{$item.parentId}}.jpg"></image>
            <text class="caipu-type-one-name">{{$item.name}}</text>
          </stack>
        </list-item>
      </block>
    </list>

  </div>
</template>

<style>
  .demo-page {
    flex-direction: column;
    width: 100%;
    align-items: center;
    align-content: center;
   

  }

  .hello {
    font-size: 40px;
    color: rgb(233, 81, 10);
    margin-top: 20px;
    text-align: center;

  }

  .seachspan {

    flex-direction: row;
    width: 100%;
    height: 86px;
    align-items: center;
    margin-top: 20px;
    padding-left: 10px;
    padding-right: 10px;

  }

  .seacheating {
    padding-left: 10px;
    border-width: 1px;
    border-color: #FF6347;
    width: 80%;
    height: 80px;
    border-top-left-radius: 8px;
    border-bottom-left-radius: 8px;


  }

  .soutu-btn {
    background: linear-gradient(45deg, #FF6347, rgb(245, 73, 73));
    width: 20%;
    height: 80px;
    color: #ffffff;
    border-bottom-right-radius: 8px;
    border-top-right-radius: 8px;
  }
  .list-cls {
    width: 100%;
    height: 44%;
    flex-direction: column;
  }
  .tuijian {
    padding-left: 10px;
    font-size: 30px;
    text-align: left;
    margin-top: 30px
  }
  .clstjnameone {
    font-size: 40px;
    color: rgb(252, 135, 115);
    margin-top: 20px;
    text-align: center;
    lines: 1;
    width: 100%;

  }

  .clstjnametwo {
    font-size: 40px;
    color: #FF6347;
    margin-top: 20px;
    width: 100%;
    text-align: center;

  }

  .caipu {
    width: 50%;
    font-size: 30px;
    text-align: left;
    padding-left: 10px;
    
    
  }
  .more{
    width: 50%;
    font-size: 30px;
    text-align: right;
    padding-right: 10px;
    color: rgb(4, 138, 248);
    text-decoration:underline;
  }

  .list-clslist {
    width: 100%;
    height: 50%;
    flex-direction: row;
    columns: 2;
    text-align: center;
    margin-top: 30px;
 
  
  }
  .caipu-type-item {
    width: 100%;
    height: 100%;
    padding-left: 10px;
    padding-right: 10px;
    text-align: center;
   
    
  
  }

  .caipu-stack {
    width: 200px;
    height: 180px;
    align-items: center;
    align-content: center;
    padding-left: 10px;
    padding-right: 10px;

  }


  .caipu-type-one-name {
    width:100% ;
    height: 100%;
    font-size: 30px;
    margin-top: 100px;
    color: rgb(233, 81, 10);
    text-align: center;
  }

  .caipu-type-one-image {
    width: 100%;
    height: 100%;
    border-bottom-right-radius: 8px;
    border-top-right-radius: 8px;
    border-top-left-radius: 8px;
    border-bottom-left-radius: 8px;


  }
</style>

<script>
  import router from '@system.router'
  import app from '@system.app'
  import fetch from '@system.fetch'
  import prompt from '@system.prompt'
  import storage from '@system.storage'
  import file from '@system.file'

  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    public: {
      hellotitle: '早上',
      tjtag: '',
      tjnametwo: '',
      eatingInput: '',
      articleList: [],
      hasData: false,
      hasMoreData: true,
      caipuList: [],
      allcaipuList:[],





    },
    onInit() {
      var key = "bdf36bef0d0829a548b8704e4eda6247";
      var mydate = new Date();
      var myhour = mydate.getHours();

      switch (myhour) {
        case 0:
          this.hellotitle = "凌晨";
          break;
        case 1:
          this.hellotitle = "凌晨";
          break;
        case 2:
          this.hellotitle = "凌晨";
          break;
        case 3:
          this.hellotitle = "凌晨";
          break;
        case 4:
          this.hellotitle = "凌晨";
          break;
        case 5:
          this.hellotitle = "清晨";
          this.tjtag = "早餐";
          break;
        case 6:
          this.hellotitle = "清晨";
          this.tjtag = "早餐";
          break;
        case 7:
          this.hellotitle = "早上";
          this.tjtag = "早餐";
          break;
        case 8:
          this.hellotitle = "早上";
          this.tjtag = "早餐";
          break;
        case 9:
          this.hellotitle = "上午";
          break;
        case 10:
          this.hellotitle = "上午";
          this.tjtag = "午餐";
          break;
        case 11:
          this.hellotitle = "上午";
          this.tjtag = "午餐";
          break;
        case 12:
          this.hellotitle = "中午";
          this.tjtag = "午餐";
          break;
        case 13:
          this.hellotitle = "中午";
          this.tjtag = "午餐";
          break;
        case 14:
          this.hellotitle = "下午";
          this.tjtag = "下午茶";
          break;
        case 15:
          this.hellotitle = "下午";
          this.tjtag = "下午茶";
          break;
        case 16:
          this.hellotitle = "下午";
          this.tjtag = "晚餐";
          break;
        case 17:
          this.hellotitle = "下午";
          this.tjtag = "晚餐";
          break;
        case 18:
          this.hellotitle = "傍晚";
          this.tjtag = "晚餐";
          break;
        case 19:
          this.hellotitle = "晚上";
          this.tjtag = "夜宵";
          break;
        case 20:
          this.hellotitle = "晚上";
          this.tjtag = "夜宵";
          break;
        case 21:
          this.hellotitle = "晚上";
          this.tjtag = "夜宵";
          break;
        case 22:
          this.hellotitle = "晚上";
          break;
        case 23:
          this.hellotitle = "晚上";
          break;

      };
      const that = this;
      if (this.tjtag == "" || this.tjtag == null || this.tjtag == undefined) { // "",null,undefined
        that.hasData = true;
        that.hasMoreData = false;
        this.tjnametwo = "还没到点,休息一会儿吧";
      } else {

        that.articleList = getFileTuiJianData(that.tjtag);
       
      }

      that.caipuList = getFileTuiJianData('菜谱');

    },
    //开始跳转到搜索界面
    searchEating() {
      // 跳转到应用内的某个页面，router用法详见：文档->接口->页面路由
      if (this.eatingInput == '') {
        prompt.showToast({
          message: '你要搜点什么？',
        })
      } else {


        router.push({
          uri: '/DemoDetail',
          params: { key: this.eatingInput }

        })
      }
    },
    openMore()
    {
      // 新需求
      // const that = this;
      // const foo = require('json-loader!./caipu.json');
      // that.allcaipuList=foo.result;
      // router.push({
      //     uri: '/IdWebview',
      //     params: { caipukey: that.allcaipuList }
      //   })
      // end
    },
    //点击推荐
    clickOpen(id, albums, title, ingredients, burden, tags, steps, imtro) {
      console.log("demo" + this.steps);
      router.push({
        uri: 'Webview',
        params: {
          albums: albums,
          title: title,
          ingredients: ingredients,
          burden: burden,
          tags: tags,
          steps: steps,
          imtro: imtro
        }
      })
    },





    bindPhoneChange(e) {
      //值就是e.value
      this.eatingInput = e.value;

    }

  }
  export function getRandomArrayElements(arr, count) {
    var shuffled = arr.slice(0), i = arr.length, min = i - count, temp, index;
    while (i-- > min) {
      index = Math.floor((i + 1) * Math.random());
      temp = shuffled[index];
      shuffled[index] = shuffled[i];
      shuffled[i] = temp;
    }
    return shuffled.slice(min);
  }
  export function getFileTuiJianData(caiputag) {
    if (caiputag == '早餐') {
      const foo = require('json-loader!./zaocan.json');

      return getRandomArrayElements(foo.result.data, 3);

    } else if (caiputag == '午餐') {
      const foo = require('json-loader!./wucan.json');
      return getRandomArrayElements(foo.result.data, 3);
    } else if (caiputag == '下午茶') {
      const foo = require('json-loader!./xiawucha.json');
      return getRandomArrayElements(foo.result.data, 3);
    } else if (caiputag == '晚餐') {
      const foo = require('json-loader!./wancan.json');
      return getRandomArrayElements(foo.result.data, 3);
    } else if (caiputag == '夜宵') {
      const foo = require('json-loader!./yexiao.json');
      return getRandomArrayElements(foo.result.data, 3);
    } else if (caiputag == '菜谱') {
      const foo = require('json-loader!./caipu.json');
      return getRandomArrayElements(foo.result, 6);
    }
  }
</script>